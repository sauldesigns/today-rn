require_relative '../node_modules/react-native/scripts/react_native_pods'
require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'
pod ‘RNFBAdMob’, :path => ‘../node_modules/@react-native-firebase/admob’
platform :ios, '11.0'

 # Define find-and-replace function
 def find_and_replace(dir, findstr, replacestr)
  Dir[dir].each do |name|
      text = File.read(name)
      replace = text.gsub(findstr,replacestr)
      replaced = text.index(replacestr)
      if replaced == nil && text != replace
          puts "Fix: " + name
          File.open(name, "w") { |file| file.puts replace }
          STDOUT.flush
      end
  end
  Dir[dir + '*/'].each(&method(:find_and_replace))
end

target 'today' do
  config = use_native_modules!

  use_react_native!(:path => config["reactNativePath"],
  :hermes_enabled => true)


  target 'todayTests' do
    inherit! :complete
    # Pods for testing
  end

 

  post_install do |installer|
    # use_flipper!({ 'Flipper-Folly' => '2.5.3', 'Flipper' => '0.87.0', 'Flipper-RSocket' => '1.3.1' })
    # flipper_post_install(installer)
    # react_native_post_install(installer)

    # # to build for the simulator on Apple M1
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        # disables arm64 builds for the simulator
        config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
      end
    end


  #   find_and_replace("../node_modules/react-native/React/CxxBridge/RCTCxxBridge.mm",
  #   "_initializeModules:(NSArray<id<RCTBridgeModule>> *)modules", "_initializeModules:(NSArray<Class> *)modules")

  # find_and_replace("../node_modules/react-native/ReactCommon/turbomodule/core/platform/ios/RCTTurboModuleManager.mm",
  #   "RCTBridgeModuleNameForClass(strongModule))", "RCTBridgeModuleNameForClass(Class(strongModule)))")
  #   ## Fix for Flipper-Folly on iOS 14.5
  #   find_and_replace("Pods/Flipper-Folly/folly/synchronization/DistributedMutex-inl.h",
  #     "atomic_notify_one(state)", "folly::atomic_notify_one(state)")

  #   find_and_replace("Pods/Headers/Private/RCT-Folly/folly/synchronization/DistributedMutex-inl.h",
  #     "atomic_notify_one(state)", "folly::atomic_notify_one(state)")

  #   find_and_replace("Pods/Flipper-Folly/folly/synchronization/DistributedMutex-inl.h",
  #     "atomic_wait_until(&state, previous | data, deadline)", "folly::atomic_wait_until(&state, previous | data, deadline)")
  end
  
end

target 'today-tvOS' do
  # Pods for today-tvOS

  target 'today-tvOSTests' do
    inherit! :search_paths
    # Pods for testing
  end
end
